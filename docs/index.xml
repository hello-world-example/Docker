<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker</title>
    <link>https://hello-world-example.github.io/Docker/</link>
    <description>Recent content on Docker</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/_sidebar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/_sidebar/</guid>
      <description> 核心概念   cgroups  chroot 命令   Docker-Cli   logs   Action   Dockerfile   docker-compose  常见问题..   时区设置  日志清理   Images   kennethreitz/httpbin    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Action/docker-maven-plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Action/docker-maven-plugin/</guid>
      <description>docker-maven-plugin Read More  官方仓库 io.fabric8 / docker-maven-plugin 官方文档 dmp.fabric8.io  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Action/dockerd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Action/dockerd/</guid>
      <description>dockerd -H TODO &amp;ndash;registry-mirror $registry_mirror
&amp;ndash;insecure-registry $insecure_registry
&amp;ndash;data-root $graph
&amp;ndash;exec-root $exec_root
&amp;ndash;pidfile $pidfile
-H tcp://$ip:2375
-H unix:///var/run/docker.sock
Read More  官方文档 dockerd  Docker 远程连接 &amp;ndash; dockerd 命令详解  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Action/Dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Action/Dockerfile/</guid>
      <description>Dockerfile 指令  指令不区分大小写，但是建议使用 大写，便于跟参数区分开 按顺序执行 Dockerfile 中的指令 必须以 FROM 开头，ARG 除外 为了兼容行，会忽略 # 和 指令 前面的空格，但是 不建议 注释 和 指令前面加空格  ARG  接收 docker build --build-arg &amp;lt;varname&amp;gt;=&amp;lt;value&amp;gt; 参数 唯一已和可以出现在 FROM 指令前的指令  ARG JDK_VERSION=8u102 FROMopenjdk:${JDK_VERSION}FROM 指定基础镜像
   类型 常用基础镜像 简介      操作系统 busybox 超级简化版嵌入式 Linux 系统    操作系统 alpine     操作系统 centos     操作系统 ubuntu           Java openjdk:8u102 JDK https://hub.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Action/Rest-API/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Action/Rest-API/</guid>
      <description>REST API Read More   Develop with Docker Engine API  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Core/Cgroups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Core/Cgroups/</guid>
      <description>cgroups   namespace : linux 内核在 task_struct 中对进程组管理的基础机制 cgroups ( Control Groups ) : namespace 的用户空间的管理接口 LXC ( Linux Container ) : cgroups 的管理工具 Docker : LXC 的管理器  Docker 是 Go 来实现的，动化了对 LXC 的管理过程，能够自动在线下载相应的发行版本的 rootfs。LXC 可以直接 chroot 到任意的系统的 rootfs 上并通过 cgroups 的限制机制来控制容器内系统的资源占有率。cgroups 通过配置文件或者命令配置后，限制相应进程或一组进程使用的系统资源。
摘录自 —— docker lxc cgroup namespace 入门
 作用  资源限制（Resource Limitation）：cgroups 可以对进程组使用的资源总额进行限制。如设定应用运行时使用内存的上限，一旦超过这个配额就发出 OOM（Out of Memory）。 优先级分配（Prioritization）：通过分配的 CPU 时间片数量及硬盘 IO 带宽大小，实际上就相当于控制了进程运行的优先级。 资源统计（Accounting）： cgroups 可以统计系统的资源使用量，如 CPU 使用时长、内存用量等等，这个功能非常适用于计费。 进程控制（Control）：cgroups 可以对进程组执行挂起、恢复等操作。  子系统  blkio : 这个子系统设置限制每个块设备的输入输出控制。例如:磁盘，光盘以及usb等 cpu : 这个子系统使用调度程序为cgroup任务提供cpu的访问 cpuacct : 产生cgroup任务的cpu资源报告 cpuset : 如果是多核心的cpu，这个子系统会为cgroup任务分配单独的cpu和内存 devices : 允许或拒绝cgroup任务对设备的访问 freezer : 暂停和恢复cgroup任务 memory : 设置每个cgroup的内存限制以及产生内存资源报告 net_cls : 标记每个网络包以供cgroup方便使用 ns : 名称空间子系统 perf_event: 增加了对每group的监测跟踪的能力  常用命令 # 安装 (apt-get install cgroup-bin) yum install libcgroup # 显示已经挂载的子系统 ( lssusys ) ll /sys/fs/cgroup/ .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Core/Chroot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Core/Chroot/</guid>
      <description>chroot Read More   理解 chroot  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Docker-Cli/logs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Docker-Cli/logs/</guid>
      <description>docker logs https://www.jianshu.com/p/1eb1d1d3f25e
https://www.jianshu.com/p/dc6136be3ff6</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Docker-Compose/Cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Docker-Compose/Cli/</guid>
      <description>docker-compose 命令 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Docker-Compose/docker-compose.yml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Docker-Compose/docker-compose.yml/</guid>
      <description>docker-compose.yml 文件结构和示例    YAML、YML在线编辑(校验)器  Compose file structure and examples   version: &amp;#34;3.8&amp;#34; services: redis: # 镜像 image: redis:alpine # &amp;#34;no&amp;#34;: 默认策略 # always: 不管什么状态都重启 # on-failure: 容器以非 0 状态退出时重启 # unless-stopped: 不管什么退出状态都重启，如果容器之前已经为停止状态，不尝试启动 restart: always # 端口映射，同 &amp;#34;6379:6379&amp;#34; ports: - &amp;#34;6379&amp;#34; # 指定 DNS dns: - 8.8.8.8 - 9.9.9.9 # /etc/hosts，--add-host extra_hosts: - &amp;#34;somehost:162.242.195.82&amp;#34; - &amp;#34;otherhost:50.31.209.229&amp;#34; networks: - frontend env_file: .env environment: - RACK_ENV=development - SHOW=true - SESSION_SECRET deploy: replicas: 2 update_config: parallelism: 2 delay: 10s restart_policy: condition: on-failure db: image: postgres:9.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Docker-Compose/Quick-Start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Docker-Compose/Quick-Start/</guid>
      <description>docker-compose 快速开始 安装 # 下载 docker-compose 文件 curl -L https://github.com/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` \  &amp;gt; /usr/local/bin/docker-compose # 授予可执行权限 chmod u+x /usr/local/bin/docker-compose # 查看版本 docker-compose version docker-compose.yml 模板 version: &amp;#39;2.0&amp;#39; services: web: build: . ports: - &amp;#34;5000:5000&amp;#34; volumes: - .:/code - logvolume01:/var/log links: - redis redis: image: redis volumes: logvolume01: {} 命令 # 查看帮助 $ docker-compose help Define and run multi-container applications with Docker. Usage: docker-compose [-f &amp;lt;arg&amp;gt;...] [options] [COMMAND] [ARGS...] docker-compose -h|--help Options: .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/FAQ/Clear-Logs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/FAQ/Clear-Logs/</guid>
      <description>清理 Docker 容器日志 清除日志文件 # MAC Docker tty # $ screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty # 日志文件路径 $ docker inspect -f &amp;#39;{{.LogPath}}&amp;#39; # 或 $ docker inspect &amp;lt;container name&amp;gt; | grep -2 Log &amp;#34;LogPath&amp;#34;: &amp;#34;/var/lib/docker/containers/xxx/xxx-json.log&amp;#34;, # 查看容器列表 $ ls -al /var/lib/docker/containers # 找到日志文件并计算大小 $ find /var/lib/docker/containers/ -size +500k -name *-json.log | xargs du -sh # 清除日志文件 $ echo &amp;#34;&amp;#34; &amp;gt; /var/lib/docker/containers/xxxxxxx/xxxxxxx-json.log 设置日志文件大小 全局设置 $ vim /etc/docker/daemon.json { &amp;#34;log-driver&amp;#34;:&amp;#34;json-file&amp;#34;, &amp;#34;log-opts&amp;#34;: {&amp;#34;max-size&amp;#34;:&amp;#34;500m&amp;#34;, &amp;#34;max-file&amp;#34;:&amp;#34;3&amp;#34;} } docker-compose services: nginx: .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/FAQ/TimeZone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/FAQ/TimeZone/</guid>
      <description>时区设置 启动后修改 # 查看是否是链接的方式 $ ls -al /etc/localtime xxxx /etc/localtime -&amp;gt; /usr/share/zoneinfo/Asia/Shanghai # 如果不是，链接到指定时区文件，f 强制覆盖 $ ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 或 复制时区文件 # cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 使用宿主机时区 $ docker cp /etc/localtime container_id:/etc/localtime 启动时设置 # 设置时区环境 $ docker run -d \  -e TZ=&amp;#34;Asia/Shanghai&amp;#34; \  ... # 挂载宿主机时区 $ docker run -d \  -v /etc/localtime:/etc/localtime \  ... 安装时区数据   如果 /usr/share/zoneinfo 文件夹不存在，需要先先下载时区数据
  tzselect 选择时区时：/usr/bin/tzselect: time zone files are not set up correctly</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Images/Httpbin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Images/Httpbin/</guid>
      <description>kennethreitz/httpbin 测试 HTTP 请求及响应信息
Install $ docker pull kennethreitz/httpbin $ docker run -p 80:80 kennethreitz/httpbin 简介  Method 请求方式 Auto 认证  Basic Barer Digest   Status 状态码 Request 请起头 Response 响应头 Response 格式 动态数据  base64 延迟 UUID 流   Cookie Images 重定向 &amp;hellip;  Read More   postmanlabs / httpbin http://httpbin.org/  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/docs/Images/Nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/docs/Images/Nginx/</guid>
      <description>Nginx 目录结构 . ├── Dockerfile ├── conf.d │ └── default.conf └── docker-compose.yml Dockerfile FROMnginxMAINTAINERMr.Kail# WORKDIR /EXPOSE80# 删除容器内 Nginx 配置文件RUN rm /etc/nginx/conf.d/default.conf# 把配置文件拷贝到容器内ADD ./conf.d/default.conf /etc/nginx/conf.d/default.conf# 启动 nginxRUN nginx# docker build -t kail/nginx .docker-compose.yml version: &amp;#39;2&amp;#39; services: kail: build: . restart: always # 端口是 80 ports: - &amp;#34;80:80&amp;#34; #  volumes: - &amp;#34;/opt/data/docker-volume/nginx/html:/tmp/html&amp;#34; # docker-compose up -d # docker run -d -p 80:80 -v /opt/data/docker-volume/nginx/html:/tmp/html --name nginx_kail kail/nginx # docker run -d -p 80:80 -v /opt/data/docker-volume/nginx/html:/tmp/html --name nginx_kail nginx_kail conf.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Docker/TODO/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Docker/TODO/</guid>
      <description>TODO  hosts ?? DNS??  </description>
    </item>
    
  </channel>
</rss>